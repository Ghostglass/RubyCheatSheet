#+TITLE: Ruby Reference Sheet
# SUBTITLE: /Everything is an object!/
#+MACRO: blurb  Reference of basic commands to get comfortable with Ruby ---Pure OOP!
#+AUTHOR: [[http://www.cas.mcmaster.ca/~alhassm/][Musa Al-hassy]]
#+EMAIL: alhassy@gmail.com
#+INCLUDE: CheatSheet/CheatSheetSetup.org
#+PROPERTY: header-args :results replace value
#+TODO: Todo | spacing LaTeX

* LaTeX Extra, Local, Setup  :ignore:

# Empty by default.
#+LATEX_HEADER: \def\cheatsheeturl{https://github.com/alhassy/RubyCheatSheet}

# The following are the defaults & may be omitted.
#+LATEX_HEADER: \def\cheatsheetcols{2}
#+LATEX_HEADER: \landscapetrue
#+LATEX_HEADER: \def\cheatsheetitemsep{-0.5em}

# Example unicode declarations; see section “unicode” below.
#+LATEX_HEADER: \newunicodechar{‿}{\ensuremath{\smile}}
#+LATEX_HEADER: \newunicodechar{⊕}{\ensuremath{\oplus}}
#+LATEX_HEADER: \newunicodechar{≈}{\ensuremath{\approx}}
#+LATEX_HEADER: \newunicodechar{ℂ}{\ensuremath{\mathbb{C}}}
#+LATEX_HEADER: \newunicodechar{𝑬}{\ensuremath{\mathbf{E}}}
#+LATEX_HEADER: \newunicodechar{∋}{\ensuremath{\ni}}

* COMMENT Contents :TOC:QUOTE:ignore:
#+BEGIN_QUOTE
- [[#extra-local-setup][Extra, Local, Setup]]
- [[#project-goal][Project Goal]]
- [[#cheatsheet-examples][CheatSheet Examples]]
- [[#why-learn--relearn][Why Learn & Relearn?]]
- [[#getting-started][Getting Started]]
- [[#what-if-its-not-good-enough][What if it's not good enough?]]
- [[#what-if-i-want-n-columns-or-non-landscape-or-multiple-formats][What if I want ~N~ columns? Or non-landscape? Or multiple formats?]]
- [[#colourful-source-blocks][Colourful Source Blocks]]
- [[#break][break]]
- [[#basic-equational-support][Basic Equational Support]]
- [[#unicode][Unicode]]
- [[#parallel-environment][Parallel Environment]]
- [[#break-1][break]]
- [[#subsection-support][Subsection Support]]
  - [[#a-new-child-tree][A new child tree]]
  - [[#another-child-tree][Another child tree]]
- [[#making-readmeorg][Making ~README.org~]]
#+END_QUOTE

* COMMENT ~LaTeX~ commands ↦ ~#+latex: \LaTeX~

  Execute the following block, with ~C-c C-c~ anywhere inside it,
  to hide all LaTeX specific items away so that, for example, the generated HTML
  does not show them.

  #+BEGIN_SRC emacs-lisp :results no
(defun my/replace-in-buffer (this that)
  "Replace every occurance of regexp ‘this’ with ‘that’
   in the current buffer."
   (interactive)
   (save-excursion
    (beginning-of-buffer)
    (while (re-search-forward this nil t)
      (replace-match that)
    ))
)

;; Replace newline, any number of space, then room or vspace with a #+latex: beforehand.
(let (this that)
  (dolist (kp '( ( "^[ ]*\\\\room" . "#+latex: \\\\room")
         ( "^[ ]*\\\\vspace" . "#+latex: \\\\vspace")
         ( "^[ ]*\\\\hspace" . "#+latex: \\\\hspace")
         ( "^[ ]*\\\\newpage" . "#+latex: \\\\newpage")
         ( "^[ ]*\\\\columnbreak" . "#+latex: \\\\columnbreak")
         ))
    (setq this (car kp))
    (setq that (cdr kp))
    (my/replace-in-buffer this that)
   )
)
  #+END_SRC

  #+RESULTS:

* COMMENT Emacs Setup

  + [[https://github.com/zenspider/enhanced-ruby-mode][Enhanced Ruby Mode]]: Static analysis, such as assigning to unused variables, and smart indentation.
     #+BEGIN_SRC emacs-lisp
(use-package enh-ruby-mode)

(add-hook 'ruby-mode-hook 'enh-ruby-mode)
#+END_SRC
  + [[https://github.com/dgutov/robe][Robe-mode]]: Display documentation, jump to definitions, name completion.
#+BEGIN_SRC emacs-lisp
(use-package robe)
(add-hook 'ruby-mode-hook 'robe-mode)

(push 'company-robe company-backends)

;; Autoclose paired syntax elements like parens, quotes, etc
(add-hook 'ruby-mode-hook 'ruby-electric-mode)
#+END_SRC

  + In org-blocks:

   #+BEGIN_SRC ruby
RUBY_VERSION
#+END_SRC

    #+RESULTS:
    : 2.3.7

+ [[https://worace.works/2016/06/07/getting-started-with-emacs-for-ruby/][Getting Started with Emacs for Ruby]]
  and
  [[https://wikemacs.org/wiki/Ruby][Ruby with Emacs]]

* Everything is an object!

#+latex: \hspace{-1.3em}
Method calls are really message passing:
~x ⊕ y ≈ x.⊕(y) ≈ x.send "⊕" , y~

Methods are also objects:
~f x ≈ method(:f).call x~

*Remember*: Use ~name.methods~ to see the methods a name has access to.
Super helpful to discover features!

#+BEGIN_SRC ruby
"Hi".class                # ⇒ String
"Hi".method(:class).class # ⇒ Method
"Hi".methods              # ⇒ Displays all methods on a class ♥‿♥
2.methods.include?(:/)    # ⇒ true, 2 has a division method
#+END_SRC

:Examples:
#+BEGIN_SRC ruby
# Arithmetic is syntactic sugar: x ⊕ y ≈ x.⊕(y)
2 ** 5 # ⇒ 32, exponent
2.%(5) # ⇒ 2, mod
#+END_SRC
:End:

Everything has a value ---possibly ~nil~.
  - There's no difference between an expression and a statement!

* Functions -- Blocks

#+latex: \hspace{-1.3em}
  Multiple ways to define anonymous functions; application can be a number of ways too.
  #
  #+begin_parallel org
#+BEGIN_SRC ruby
fst = lambda { |x, y| x}
fst.call(1, 2)   # ⇒ 1
fst.(1, 2)       # ⇒ 1

# Supply one argument at a time.
always7 = fst.curry.(7)
always7.(42)             # ⇒ 42

# Expplicitly curried.
fst = lambda {|x| lambda {|y| x}}
fst = ->(x) {->(y) {x}}
fst[10][20]  # ⇒ 10
fst.(100).(200)  # ⇒ 100

fst.methods # ⇒ arity, lambda?,
            #   parameters, curry

#+END_SRC

# \columnbreak

#+BEGIN_SRC ruby
def sum x, y = 666, with: 0
  x + y + with end

sum (sum 1, 2) , 3 # ⇒ 6
sum 1              # ⇒ 667
sum 1, 2           # ⇒ 3
sum 1, 22, with: 3  # ⇒ 6
#+END_SRC

#+end_parallel

Parenthesises are optional unless there's ambiguity.
  + The value of the last statement is the ‘return value’.
  + Function application is right-associative.
  + Arguments are passed in with commas.

Notice that the use of ‘=’ in an argument list to mark arguments as *optional* with default values.
We may use *keyword* arguments, by suffixing a colon with an optional default value
to mark the argument as optional; e.g., omitting the ~0~ after ~with:~ makes it a necessary (keyword) argument.

Convention:
Predicate names end in a ~?~; destructive function names end in ~!~.
  # - These usually come in pairs, with and without the bang, to indicate
  #   those that alter the given arguments and those that return a new changed version.

#+latex: \columnbreak

*Higher-order*: We use ~&~ to indicate that an argument is a function.
#+BEGIN_SRC ruby
def apply(x, &do_it) if block_given? then do_it.call(x) else x end end
apply (3) { |n| 2 * n }   # ⇒ 6, parens around ‘3’ are needed!
apply 3 do |n| 20 * n end # ⇒ 6
apply 3                   # ⇒ 3
#+END_SRC

In fact, all methods have an implicit, optional block parameter.
It can be called with the ~yield~ keyword.
#+BEGIN_SRC ruby
sum(1, 2) do |x| x * 0 end  # ⇒ 3, block is not used in “sum”

def sum′ (x, y) if block_given? then yield(x) + yield(y) else x + y end end
sum′(1, 2)                   # ⇒ 3
sum′(1, 2) do |n| 2 * n end  # ⇒ 6
sum′(1, 2) do end # ⇒ nil + nil, but no addition on nil: CRASHES!
sum′(1, 2) { 7 }  # ⇒ 14; Constanly return 7, ignoring arguments; 7 + 7 ≈ 14
#+END_SRC

Variadic number of arguments:
#+BEGIN_SRC ruby
def sum″ (*lots_o_stuff) toto = 0; lots_o_stuff.each{ |e| toto += e}; toto end
sum″ 2 , 4 , 6 , 7  #⇒ 19

# Turn a list into an argument tuple using “splat”, ‘*’
nums = [2, 4, 6, 7, 8, 9]
sum″ nums  #⇒ Error: Array can't be coerced into number
sum″ *nums.first(4)  #⇒ 19
#+END_SRC

If a name is overloaded as a variable and as a function, then an empty parens must be used
when the function is to be invoked.
# + Like variables, method names may begin with capital letters.
#+BEGIN_SRC ruby
w = "var"
def w; "func" end
"w: #{w}, but w(): #{w()}" # ⇒ w: var, but w(): func
#+END_SRC


“Singleton methods”: You can attach methods to existing names whenever you like.
#+BEGIN_SRC ruby
x = "ni"
def x.upcase; "The knights who say #{self}" end
x.upcase # ⇒ The knights who say ni

# Other items are unaffected.
"ni".upcase  # ⇒ NI, the usual String capitalisation method
#+END_SRC

We can redfine any method; including the one that handles missing method issues.
#+BEGIN_SRC ruby
x.speak # ⇒ Error: No method ‘speak’
# Do nothing, yielding ‘nil’, when a method is missing.
def method_missing(id, *args) end
x.speak # ⇒ nil
#+END_SRC

Operators are syntactic sugar and can be overrided.
This includes the arithmetical ones, and ~[]~, ~[]=~; and unary ± via ~+@~, ~-@~.
#
#+begin_parallel org
#+BEGIN_SRC ruby
def x.-(other); "nice" end
x - "two" # ⇒ "nice"
#+END_SRC
#+latex: \columnbreak

Forming aliases:
#+BEGIN_SRC ruby

alias summing sum″
summing 1, 2, 3  # ⇒ 6
#+END_SRC
 #+end_parallel

#+LATEX: \ifnum\cheatsheetcols=1  \else \vspace{-4em} \fi
** COMMENT Prickly Parts
#+BEGIN_SRC ruby
ok₀ = lambda {|x| x}
def ok₁ x; x end
ok₀.class            # ⇒ Proc
(method :ok₁).class  # ⇒ Method
#+END_SRC

* Variables & Assignment
#+latex: \hspace{-1.3em}
Assignment ‘=’ is right-associative and returns the value of the RHS.
#+BEGIN_SRC ruby :results value
# Flexible naming, but cannot use ‘-’ in a name.
this_and_that = 1
𝓊ℕ𝒾ℂ∅𝒟𝑬     = 31

# Three variables x,y,z with value 2.
x = y = z = 2

# Since everything has a value, “y = 2” ⇒ 2
x = 1, y = 2  # Whence, x gets “[1, 2]”!

x = 1; y = 2  # This is sequential assignment.

# If LHS as has many pieces as RHS, then we have simultenous assignment.
x , y = y , x # E.g., this is swap

# Destrucuring with “splat” ‘*’
a , b, *more = [1, 2, 3, 4, 5] # ⇒ a ≈ 1; b ≈ 2; c ≈ [3, 4, 5]

# Without splat, you only get the head element!
a , b, c = [1, 2, 3, 4, 5] # ⇒ a ≈ 1; b ≈ 2; c ≈ 3

# Variable scope is determined by name decoration.
# Constants are names that begin with a captial letter.
$a = 2; @a = 3; @aa = 4; A = 5
[defined? a, defined? $a, defined? @a, defined? @@a, defined? A]
# ⇒ [local-variable , global-variable , instance-variable , hline, constant]
#+END_SRC

* Strings

#+latex: \hspace{-1.3em}
Single quotes are for string literals,
    whereas double quotes are for string evaluation, [[https://www.google.com/search?q=interpolation&oq=interpolation&aqs=chrome..69i57j0l5.724j0j7&sourceid=chrome&ie=UTF-8][‘interpolation’]].
    #
#+begin_parallel org
#+BEGIN_SRC ruby
you = 12         # ⇒ 12
"Me and #{you}"  # ⇒ Me and 12
'Me and #{you}'  # ⇒ Me and #{you}

# String catenation
"This " + "That"
"This " << "That"

# “to string” function
"hello " + 23.to_s  # ⇒ hello 23

# String powers
"hello " * 3 # ⇒ hello hello hello

# Print with a newline
puts "Bye #{you}"  # ⇒ Bye 12 ⇒ nil
#+END_SRC
#+end_parallel

#+latex: \vspace{-2em}

* Booleans

#+latex: \hspace{-1.3em}
 ~false, nil~ are both considered /false/; all else is considered /true/.
+ Expected relations: ~==, !=, !, &&, ||, <, >, <=, >=~
+ ~x <=> y~ returns 1 if ~x~ is larger, 0 if equal, and -1 otherwise.
+ ~and, or~ are the usual logical operators but with lower precedence.
+ They're used for control flow; e.g.,
        ~s₀ and s₁ and ⋯ and sₙ~ does each of the ~sᵢ~ until one of them is false.

* spacing COMMENT break                                                      :ignore:
#+latex: \columnbreak
* Arrays

#+latex: \hspace{-1.3em}
  Arrays are heterogeneous and 0-indexed.
#+BEGIN_SRC ruby :results output
array = [1, "two", :three, [:a, "b", 12]]
#+END_SRC

Indexing: ~x[±i]~ ≈ “value if i < x.length else nil”
~x[i]~ ⇒ The /i-th/ element from the start; ~x[-i]~ ⇒ /i-th/ element from the end.
#+BEGIN_SRC ruby :results output
array[1]     # ⇒ "two"
array[-1][0] # ⇒ :a
#+END_SRC

Inclusive Subsegment using ~..~, excluding upper index using ~,~.
 | ~x[0..2] ≈ x[0, 3] ≈ [x₀, x₁, x₂]~ |
 | Syntactic sugar: ~x[i] ≈ x.[] i~   |

As always, learn more with ~array.methods~ to see, for example,
~first, last, reverse, push and << are both “snoc”, include? “∋”, map~.
Functions ~first~ and ~last~ take an optional numeric argument $n$
to obtain the /first n/ or the /last n/ elements of a list.

Methods yield new arrays; updates are performed by methods ending in “!”.
#+BEGIN_SRC ruby :results output
x = [1, 2, 3]  # A new array
x.reverse      # A new array; x is unchanged
x.reverse!     # x has changed!

# Traverse an array using “each” and “each_with_index”.
x.each do |e| puts e.to_s end
#+END_SRC

* Symbols

#+latex: \hspace{-1.3em}
  Symbols are immutable constants which act as /first-class variables./
  + Symbols evaluate to themselves, like literals ~12~ and ~"this"~.

#+begin_parallel org
#+BEGIN_SRC ruby
:hello.class # ⇒ Symbol
# :nice = 2 # ⇒ ERROR!

# Conversion from strings
"nice".to_sym == :nice  # ⇒ true
#+END_SRC
#+end_parallel

Strings occupy different locations in memory
even though they are observationally indistinguishable.
In contrast, all occurrences of a symbol refer to the same memory location.

#+BEGIN_SRC ruby
:nice.object_id == :nice.object_id   # ⇒ true
"this".object_id == "this".object_id # ⇒ false
#+END_SRC

* Control Flow

#+latex: \hspace{-1.3em}
We may omit ~then~ by using ~;~ or a newline, and
may contract ~else if~ into ~elsif~.
#+BEGIN_SRC ruby
if :test₁ then :this else if :test₂ then :that end  end
#+END_SRC
#+BEGIN_SRC ruby :results output
  (1..5).each do |e| puts e.to_s end
≈ for e in 1..5 do puts e.to_s end
≈ e = 1; while e <= 5 do puts e.to_s; e += 1 end
#+END_SRC

* Hashes

#+latex: \hspace{-1.3em}
 Finite functions, or ‘dictionaries’ of key-value pairs.

#+BEGIN_SRC ruby :results output
hash = { "jasim" => :farm, :qasim => "hockey", 12 => true}

hash.keys     # ⇒ ["jasim", :qasim, 12]
hash["jasim"] # ⇒ :farm
hash[12]      # ⇒ true
hash[:nope]   # ⇒ nil

# Simpler syntax when all keys are symbols.
oh = {this: 12, that: "nope", and: :yup}
oh.keys  #⇒ [:this, :that, :and]
oh[:and] # ⇒ :yup

# As always, learn more with
# hash.methods  ⇒ keys, values, key?, value?, each, map, count

# Traverse an array using “each” and “each_with_index”.
oh.each do |k, v| puts k.to_s end
#+END_SRC

* Classes
  :Important_Remark:

  When working with top-level class definitions org-babel complains
  that the definition is taking place in a method, which Ruby disallows.
  ( If you really want that, turn it into a string and call ~eval~. )

  However, using ~:results output~ allows me to have classes and use ~C-c C-c~ on
  org-babel blocks ^_^

  :End:

#+latex: \hspace{-1.3em}
Instance fields are any ~@~ prefixed variables.
  + Class fields, which are shared by all instances, are any ~@@~ prefixed variables.
#+BEGIN_SRC ruby :tangle test.rb :results output
class Person

  @@world = 0 # How many persons are there?
  # Instance values: These give us a reader “x.field” to see a field
  # and a writer “x.field = …” to assign to it.
  attr_accessor :name
  attr_accessor :work

  # Optional; Constructor method via the special “initialize” method
  def initialize (name, work) @name = name; @work = work; @@world += 1 end

  # See the static value, world
  def world
    @@world
  end

  # Class methods use “self”; they can only be called by the class, not by instances.
  def self.flood; puts "A great flood has killed all of humanity"; @@world = 0 end

end

jasim = Person.new("Qasim", "Farmer")
qasim = Person.new("", "")
jasim.name = "Jasim"

puts "#{jasim.name} is a #{jasim.work}"
puts "There are #{qasim.world} people here!"
Person.flood
puts "There are #{qasim.world} people here!"
#+END_SRC

** Modifiers: ~public, private, protected~

Modifiers: ~public, private, protected~

  + Everything is public by default.
  + One a modifier is declared, by itself on its own line, it remains in effect
    until another modifier is declared.
  + Public  ⇒ Inherited by children and can be used without any constraints.
  + Protected ⇒ Inherited by children, and may be occur freely /anywhere/ in the class definition;
    such as being called on other instances of the same class.
  + Private ⇒ Can only occur stand-alone in the class definition.

** Classes are open!
Classes are open!

+ We can freely add and alter class continents long after a class is defined.
+ We may even alter core classes.
+ Useful to extend classes with new functionality.

** Even classes are objects!
~Class~ is also an object in Ruby.

#+BEGIN_SRC ruby
  class C ⟪contents⟫ end
≈
  C = Class.new do ⟪contents⟫ end
  #+END_SRC

#+BEGIN_SRC ruby :results output
C = Class.new do attr_accessor :hi end

c = C.new
c.hi = 12
puts "#{c.hi} is neato"
#+END_SRC

* Modules & Mixins

Inheritance: ~class Child < Parent ⋯ end~.

Modules:
+ Inclusion binds module contents to the class instances.
+ Extension binds module contents to the class itself.

#+BEGIN_SRC ruby :results output
module M; def go; "I did it!" end end

class Verb; include M end
class Action; extend M end

puts "#{Verb.new.go} versus #{Action.go}"
#+END_SRC

#+RESULTS:
: I did it! versus I did it!

* COMMENT Structures and ADTS

  A ‘structure’ is just a bunch of items grouped together ---like a named product.
  This is made by declaring a class with the names that can be read and written to,
  and a constructor.

* Reads

#+latex: {\color{white}.}\vspace{-1em}
+ [[https://rubymonk.com/][Ruby Monk]] --- Interactive, in browser, tutorials
+ [[https://www.ruby-lang.org/en/documentation/][Ruby Meta-tutorial --- ruby-lang.org]]
+ [[https://learnxinyminutes.com/docs/ruby/][Learn Ruby in ~30 minutes]] --- https://learnxinyminutes.com/
+ [[http://egonschiele.github.io/contracts.ruby/][contracts.ruby --- Making assertions about your code]]
+ [[https://github.com/txus/adts][Algebraic Data Types for Ruby]]
+ [[https://github.com/rubocop-hq/ruby-style-guide][Community-driven Ruby Coding Style Guide]]
+ [[http://ruby-doc.com/docs/ProgrammingRuby/][Programming Ruby: The Pragmatic Programmer's Guide]]

  :More:
http://ruby-for-beginners.rubymonstas.org/index.html
http://rubylearning.com/satishtalim/tutorial.html
https://spin.atomicobject.com/2013/07/29/ruby-data-types-algebraic/
:End:

* COMMENT produce a single column portrait of the cheat sheet
Press ~C-c C-c~ on the following incantation to produce a single column portrait of the cheat sheet.
#+name: make-portrait
#+BEGIN_SRC emacs-lisp :results none
(with-temp-buffer
    (insert
    "#+EXPORT_FILE_NAME: CheatSheet_Portrait.pdf
     ,#+LATEX_HEADER_EXTRA: \\landscapefalse \\def\\cheatsheetcols{1}
     ,#+INCLUDE: CheatSheet.org
    ")

    (let ((org-export-use-babel nil))
      (org-mode)
      (org-latex-export-to-pdf)
      )
)
#+END_SRC

* spacing COMMENT break :accomodating_multiple_formats:ignore:

#+LATEX: \ifnum\cheatsheetcols=1 \newpage \else \columnbreak \fi

* COMMENT Making ~README.md~

  Evaluate the following source block with ~C-c C-c~
  to produce a ~README~ file.

#+NAME: make-readme
#+BEGIN_SRC emacs-lisp
(with-temp-buffer
    (insert
    "#+EXPORT_FILE_NAME: README.md
     # HTML: <h1> Easily Making CheatSheets with Org-mode </h1>
     ,#+OPTIONS: toc:nil d:nil
     # Toc is displayed below at a strategic position.

     {{{blurb}}}

     ◈ [[https://alhassy.github.io/RubyCheatSheet/][Website]] ◈

    ,*The listing sheet, as PDF, can be found
     [[file:CheatSheet.pdf][here]]*,
     or as a [[file:CheatSheet_Portrait.pdf][single column portrait]],
     while below is an unruly html rendition.

     # Markdown links: [title](target)

     This reference sheet is built from a
     [[https://github.com/alhassy/CheatSheet][CheatSheets with Org-mode]]
     system.

     ,#+TOC: headlines 2
     ,#+INCLUDE: CheatSheet.org
    ")

    ;; No code execution on export
    ;; ⟪ For a particular block, we use “:eval never-export” ⟫
    ;;
    (let ((org-export-use-babel nil))
      (org-mode)
      (org-md-export-to-markdown)
      )
)
#+END_SRC

#+RESULTS: make-readme
: README.md

Note that the ~blurb~ macro is defined by the user, to provide a terse description of the project.
   - Think the one-line statement at the top of a github repo page.

#    The ~d:nil~ ensures the ‘drawer’ ~:Hide: ⋯ :End:~ is not exported; it's there for me
#    as a reminder.

* COMMENT footer

0. The first “eval” below is convenience matter
   that should be loaded whenever CheatSheet.org is opened.

1. The second “eval” makes a README for the repo, whenever the file is opened,
   and is then bound to ~f11~ for convenience.

2. Likewise, the third eval is for making a portrait form of the cheatsheet ---~f12~.

3. :TOC: should not be exported in this file.

   See https://github.com/snosov1/toc-org for more on toc-org.

   (add-to-list 'org-export-exclude-tags "TOC")
   (delete "TOC" org-export-exclude-tags)

    And every time you'll be saving an org file, the first headline with a :TOC:
    tag will be updated with the current table of contents.
    (toc-org-enable)

# Local Variables:
# eval: (progn (visual-line-mode t) (require 'ox-extra) (ox-extras-activate '(ignore-headlines)))
# eval: (local-set-key (kbd "<f11>") '(lambda () (interactive) (org-babel-goto-named-src-block "make-readme") (org-babel-execute-src-block) (outline-hide-sublevels 1)))
# eval: (local-set-key (kbd "<f12>") '(lambda () (interactive) (org-babel-goto-named-src-block "make-portrait") (org-babel-execute-src-block) (outline-hide-sublevels 1)))
# eval:    (add-to-list 'org-export-exclude-tags "TOC")
# eval: (progn (visual-line-mode t) (require 'ox-extra) (ox-extras-activate '(ignore-headlines)))
# compile-command: (org-latex-export-to-pdf)
# End:
